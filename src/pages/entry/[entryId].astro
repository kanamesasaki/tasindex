---
// src/pages/entry/[entryId].astro
import Database from "better-sqlite3";
import path from "path";
import fs from "fs";
// Astroの型定義を使う場合（必須ではない）
// import type { GetStaticPaths } from 'astro';

// --- Database Path (index.astroと同様) ---
const dbRelativePath = "database/spacecraft_thermal.db"; // プロジェクトルートからの相対パス
const dbPath = path.resolve(process.cwd(), dbRelativePath);

// --- getStaticPaths: Astroにどのページを生成するか教える ---
export async function getStaticPaths() {
  const dbRelativePath = "database/spacecraft_thermal.db";
  const dbPath = path.resolve(process.cwd(), dbRelativePath);

  console.log("[getStaticPaths] Starting to determine paths...");
  console.log(`[getStaticPaths] Database path: ${dbPath}`);

  if (!fs.existsSync(dbPath)) {
    console.error(
      `[getStaticPaths] Database file not found at ${dbPath}. Cannot generate entry pages.`
    );
    return []; // エラー時は空配列を返し、ページを生成しない
  }

  let allEntries = [];
  try {
    const db = new Database(dbPath, { readonly: true });
    // 単純に全てのEntryIDを取得
    const stmt = db.prepare("SELECT EntryID FROM ThermalAnalysisEntry");
    allEntries = stmt.all(); // 例: [{ EntryID: 1 }, { EntryID: 2 }, ...]
    db.close();
    console.log(`[getStaticPaths] Found ${allEntries.length} EntryIDs.`);
  } catch (error) {
    console.error(`[getStaticPaths] Error fetching EntryIDs: ${error}`);
    return [];
  }

  // Astroが要求する形式に変換: { params: { routeParam: value } }
  return allEntries.map((entry) => ({
    params: { entryId: entry.EntryID.toString() }, // URLパラメータは文字列
    // propsでデータを渡すことも可能だが、今回は各ページで再取得する
    // props: { entryId: entry.EntryID }
  }));
}

// --- ここからは個々のページ生成時に実行される ---
const { entryId } = Astro.params; // AstroがgetStaticPathsから渡したパラメータを取得
console.log(`[Page Generation] Rendering page for entryId: ${entryId}`);

let entryDetails = null;
let softwareUsed = [];
let referencesCited = [];
let errorMessage = null;

if (!fs.existsSync(dbPath)) {
  errorMessage = `Database file not found at ${dbPath}.`;
  Astro.response.status = 500; // サーバーエラー扱いが良いかも
} else {
  try {
    const db = new Database(dbPath, { readonly: true });

    // --- Query 1: 基本情報取得 ---
    const entryStmt = db.prepare(`
            SELECT
                te.EntryID, te.Description, te.SoftwareSetID, te.ReferenceSetID,
                tao.AnalysisObject,
                sc.SpacecraftName, sc.COSPAR_ID, sc.LaunchYear
            FROM ThermalAnalysisEntry te
            JOIN ThermalAnalysisObject tao ON te.ObjectID = tao.ObjectID
            JOIN Spacecraft sc ON tao.SpacecraftID = sc.SpacecraftID
            WHERE te.EntryID = ?
        `);
    entryDetails = entryStmt.get(entryId); // 単一の結果を取得

    if (entryDetails) {
      console.log(
        `  Found details for Entry ${entryId}: ${entryDetails.SpacecraftName}`
      );
      // --- Query 2: ソフトウェア情報取得 ---
      if (entryDetails.SoftwareSetID !== 0) {
        const swStmt = db.prepare(`
                    SELECT sw.SoftwareName, sw.Version, sw.Developer
                    FROM SoftwareSetMembership ssm
                    JOIN Software sw ON ssm.SoftwareID = sw.SoftwareID
                    WHERE ssm.SoftwareSetID = ?
                    ORDER BY sw.SoftwareName
                `);
        softwareUsed = swStmt.all(entryDetails.SoftwareSetID);
        console.log(`    Found ${softwareUsed.length} software entries.`);
      } else {
        console.log(`    SoftwareSetID is 0, skipping software fetch.`);
      }

      // --- Query 3: 参照情報取得 ---
      if (entryDetails.ReferenceSetID !== 0) {
        const refStmt = db.prepare(`
                    SELECT r.bibtexkey, r.Title, r.Author, r.etc
                    FROM ReferenceSetMembership rsm
                    JOIN Reference r ON rsm.bibtexkey = r.bibtexkey
                    WHERE rsm.ReferenceSetID = ?
                    ORDER BY r.bibtexkey
                `);
        referencesCited = refStmt.all(entryDetails.ReferenceSetID);
        console.log(`    Found ${referencesCited.length} reference entries.`);
      } else {
        console.log(`    ReferenceSetID is 0, skipping reference fetch.`);
      }
    } else {
      errorMessage = `Entry with ID ${entryId} not found in the database.`;
      console.warn(`  Entry ID ${entryId} not found!`);
      Astro.response.status = 404; // Not Found ステータスを設定
    }
    db.close();
  } catch (error) {
    console.error(`Error fetching details for Entry ID ${entryId}:`, error);
    errorMessage = `Error loading details: ${error.message}`;
    Astro.response.status = 500; // Internal Server Error ステータスを設定
  }
}
---

<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>
      Entry Details: {
        entryDetails
          ? `${entryDetails.SpacecraftName} - ${entryDetails.AnalysisObject}`
          : `Entry ${entryId}`
      }
    </title>
    <style>
      /* 基本的なスタイル */
      body {
        font-family: sans-serif;
        line-height: 1.6;
        padding: 1em;
        max-width: 800px;
        margin: auto;
      }
      h1,
      h2 {
        border-bottom: 1px solid #eee;
        padding-bottom: 0.3em;
        margin-top: 1.5em;
      }
      dl {
        margin-left: 1em;
      }
      dt {
        font-weight: bold;
        margin-top: 0.8em;
        color: #333;
      }
      dd {
        margin-left: 1em;
        margin-bottom: 0.5em;
        color: #555;
      }
      ul {
        list-style: none;
        padding-left: 0;
      }
      li {
        background-color: #f9f9f9;
        border: 1px solid #eee;
        padding: 0.8em;
        margin-bottom: 0.5em;
        border-radius: 4px;
      }
      li strong {
        color: #005a9c;
      }
      .error {
        color: red;
        border: 1px solid red;
        padding: 1em;
        background-color: #ffeeee;
      }
      .back-link {
        margin-bottom: 1.5em;
        display: inline-block;
        color: #005a9c;
        text-decoration: none;
        border: 1px solid #ccc;
        padding: 0.5em 1em;
        border-radius: 4px;
        transition: background-color 0.2s;
      }
      .back-link:hover {
        background-color: #f0f0f0;
      }
      .not-found {
        color: #777;
      }
    </style>
  </head>
  <body>
    <a href="/" class="back-link">&laquo; Back to Index</a>

    {/* エラーメッセージ表示 */}
    {errorMessage && <p class="error">{errorMessage}</p>}

    {/* エントリが見つかった場合 */}
    {
      entryDetails && !errorMessage && (
        <>
          <h1>{entryDetails.SpacecraftName}</h1>
          <dl>
            <>
              <dt>Analysis Object</dt>
              <dd>{entryDetails.AnalysisObject}</dd>
            </>
            <>
              <dt>COSPAR ID</dt>
              <dd>{entryDetails.COSPAR_ID || "N/A"}</dd>
            </>
            <>
              <dt>Launch Year</dt>
              <dd>{entryDetails.LaunchYear || "N/A"}</dd>
            </>
            <>
              <dt>Description</dt>
              <dd>{entryDetails.Description || "N/A"}</dd>
            </>
          </dl>

          <h2>Software Used</h2>
          {softwareUsed.length > 0 ? (
            <ul>
              {softwareUsed.map((sw) => (
                <li>
                  <strong>{sw.SoftwareName}</strong>
                  {sw.Version ? ` (Version: ${sw.Version})` : ""}
                  {sw.Developer ? ` [Developer: ${sw.Developer}]` : ""}
                </li>
              ))}
            </ul>
          ) : (
            <p>
              None specified (SoftwareSet ID: {entryDetails.SoftwareSetID}).
            </p>
          )}

          <h2>References</h2>
          {referencesCited.length > 0 ? (
            <ul>
              {referencesCited.map((ref) => (
                <li>
                  <strong>{ref.bibtexkey}</strong>
                  <br />
                  {ref.Title && `Title: ${ref.Title}`}
                  <br />
                  {ref.Author && `Author(s): ${ref.Author}`}
                  <br />
                  {ref.etc && `Other Info: ${ref.etc}`}
                </li>
              ))}
            </ul>
          ) : (
            <p>
              None specified (ReferenceSet ID: {entryDetails.ReferenceSetID}).
            </p>
          )}
        </>
      )
    }

    {/* エントリが見つからなかった場合のメッセージ (404時など) */}
    {
      !entryDetails && !errorMessage && (
        <p class="not-found">
          The requested entry (ID: {entryId}) could not be found.
        </p>
      )
    }
  </body>
</html>
