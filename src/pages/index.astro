---
// src/pages/index.astro
import Database from "better-sqlite3";
import path from "path";
import fs from "fs";

// --- Configuration ---
const dbRelativePath = "database/spacecraft_thermal.db";
const dbPath = path.resolve(process.cwd(), dbRelativePath);
// --- End Configuration ---

// Define the type for database entries - スネークケースに更新
interface ThermalAnalysisEntry {
  entry_id: number;
  analysis_object: string;
  spacecraft_name: string;
  cospar_id: string | null;
  launch_year: number;
  software_list: string | null;
  reference_keys: string | null;
}

let entries: ThermalAnalysisEntry[] = [];
let errorMessage: string | null = null;

console.log(`Attempting to connect to database at: ${dbPath}`);

try {
  // ファイル存在確認
  if (!fs.existsSync(dbPath)) {
    throw new Error(
      `Database file not found at specified path: ${dbPath}. Current working directory: ${process.cwd()}`
    );
  }
  const db = new Database(dbPath, { readonly: true });
  console.log("Database connection successful.");

  // SQLクエリをスネークケースに更新（thermal_descriptionを削除）
  const stmt = db.prepare(`
        SELECT
            te.entry_id, tao.analysis_object, sc.spacecraft_name,
            sc.cospar_id, sc.launch_year,
            GROUP_CONCAT(DISTINCT sw.software_name || COALESCE(' v' || sw.software_version, '')) AS software_list,
            GROUP_CONCAT(DISTINCT r.bibtex_key) AS reference_keys
        FROM thermal_analysis_entry te
        JOIN thermal_analysis_object tao ON te.object_id = tao.object_id
        JOIN spacecraft sc ON tao.spacecraft_id = sc.spacecraft_id
        LEFT JOIN software_set_membership ssm ON te.software_set_id = ssm.software_set_id AND te.software_set_id != 0
        LEFT JOIN software sw ON ssm.software_id = sw.software_id
        LEFT JOIN reference_set_membership rsm ON te.reference_set_id = rsm.reference_set_id AND te.reference_set_id != 0
        LEFT JOIN reference r ON rsm.bibtex_key = r.bibtex_key
        GROUP BY te.entry_id, tao.analysis_object, sc.spacecraft_name, sc.cospar_id, sc.launch_year
        ORDER BY sc.cospar_id NULLS LAST, sc.spacecraft_name, tao.analysis_object;
    `);
  entries = stmt.all() as ThermalAnalysisEntry[];
  db.close();
  console.log(`Successfully fetched ${entries.length} entries from database.`);
} catch (error: unknown) {
  console.error("Error accessing SQLite database:", error);
  errorMessage = `Failed to load data: ${error instanceof Error ? error.message : String(error)}`;
}
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TASIndex - Spacecraft Thermal Analysis Database</title>

    <meta
      name="description"
      content="A comprehensive database of spacecraft thermal analysis information and software for the flight missions."
    />
    <meta
      name="keywords"
      content="spacecraft thermal analysis, thermal analysis software"
    />
    <meta name="author" content="K. Sasaki" />

    <!-- カノニカル URL -->
    <link rel="canonical" href="https://tasindex.thermocraft.space/" />

    <!-- Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-NR7TMX1P1S"
    ></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-NR7TMX1P1S", {
        cookie_flags: "SameSite=None;Secure",
        consent: "default",
      });
    </script>

    <style>
      body {
        font-family: system-ui, sans-serif;
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
      }
      h1 {
        color: #1e40af;
        margin-top: 0;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1.5rem;
      }
      th,
      td {
        padding: 0.75rem;
        text-align: left;
        border-bottom: 1px solid #e5e7eb;
      }
      th {
        background-color: #f9fafb;
        font-weight: 600;
      }
      th.sortable {
        cursor: pointer;
        position: relative;
        padding-right: 1.5rem;
      }
      th.sortable::after {
        content: "↕";
        position: absolute;
        right: 0.5rem;
        color: #9ca3af;
      }
      th.sortable.sort-asc::after {
        content: "↑";
        color: #1e40af;
      }
      th.sortable.sort-desc::after {
        content: "↓";
        color: #1e40af;
      }
      tr:hover {
        background-color: #f3f4f6;
      }
      .search-container {
        margin: 1rem 0;
      }
      #searchInput {
        padding: 0.5rem;
        width: 300px;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
      }
    </style>
  </head>
  <body>
    <h1>TASIndex: Spacecraft Thermal Analysis Database</h1>

    <div class="search-container">
      <input type="text" id="searchInput" placeholder="Search in table..." />
    </div>

    {errorMessage && <p style="color: red;">{errorMessage}</p>}

    {
      entries.length > 0 ? (
        <table id="entriesTable">
          <thead>
            <tr>
              <th class="sortable" data-column="spacecraft_name">
                Spacecraft
              </th>
              <th class="sortable" data-column="analysis_object">
                Object
              </th>
              <th>COSPAR ID</th>
              <th class="sortable" data-column="launch_year">
                Launch Year
              </th>
              <th>Software Used</th>
            </tr>
          </thead>
          <tbody>
            {entries.map((entry) => (
              <tr>
                <td>
                  {/* この部分を修正し、スラッグベースのURLを生成 */}
                  <a
                    href={`/${entry.spacecraft_name
                      .toLowerCase()
                      .replace(/[^\w\s-]/g, "")
                      .replace(/\s+/g, "-")}-${entry.analysis_object
                      .toLowerCase()
                      .replace(/[^\w\s-]/g, "")
                      .replace(/\s+/g, "-")}/`}
                  >
                    {entry.spacecraft_name}
                  </a>
                </td>
                <td>{entry.analysis_object}</td>
                <td>{entry.cospar_id}</td>
                <td>{entry.launch_year}</td>
                <td>{entry.software_list?.replaceAll(",", ", ")}</td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        !errorMessage && <p>No entries found in the database.</p>
      )
    }

    <script>
      // テーブルソート機能
      document.addEventListener("DOMContentLoaded", () => {
        const table = document.getElementById("entriesTable");
        if (!table) return;

        const headers = table.querySelectorAll("th.sortable");
        let currentSortColumn: string | null = null;
        let currentSortDirection = "asc";

        headers.forEach((header) => {
          header.addEventListener("click", () => {
            const column = header.getAttribute("data-column");

            // 同じ列をクリックした場合は並び替え方向を切り替える
            if (currentSortColumn === column) {
              currentSortDirection =
                currentSortDirection === "asc" ? "desc" : "asc";
            } else {
              currentSortColumn = column;
              currentSortDirection = "asc";
            }

            // 見出しのスタイルをリセット
            headers.forEach((h) => {
              h.classList.remove("sort-asc", "sort-desc");
            });

            // クリックされた見出しに適切なクラスを追加
            header.classList.add(`sort-${currentSortDirection}`);

            // テーブル行をソート
            sortTable(table, column, currentSortDirection);
          });
        });

        function sortTable(
          table: HTMLElement,
          column: string | null,
          direction: string
        ) {
          const tbody = table.querySelector("tbody");
          if (!tbody) return;
          const rows = Array.from(tbody.querySelectorAll("tr"));

          // 行をソート
          const sortedRows = rows.sort((a, b) => {
            let aValue, bValue;

            // launch_yearは数値としてソート
            if (column === "launch_year") {
              aValue = parseInt(a.cells[3].textContent || "") || 0;
              bValue = parseInt(b.cells[3].textContent || "") || 0;
            } else {
              // 対応する列のインデックスを取得
              const columnIndex = Array.from(headers).findIndex(
                (h) => h.getAttribute("data-column") === column
              );
              aValue = (a.cells[columnIndex].textContent || "").toLowerCase();
              bValue = (b.cells[columnIndex].textContent || "").toLowerCase();
            }

            // 比較と方向の適用
            if (direction === "asc") {
              return aValue > bValue ? 1 : -1;
            } else {
              return aValue < bValue ? 1 : -1;
            }
          });

          // ソートされた行をテーブルに再挿入
          while (tbody.firstChild) {
            tbody.removeChild(tbody.firstChild);
          }

          sortedRows.forEach((row) => {
            tbody.appendChild(row);
          });
        }

        // 検索機能
        const searchInput = document.getElementById(
          "searchInput"
        ) as HTMLInputElement;
        if (searchInput) {
          searchInput.addEventListener("input", () => {
            const searchText = searchInput.value.toLowerCase();
            const rows = table.querySelectorAll("tbody tr");

            rows.forEach((row) => {
              const text = row.textContent?.toLowerCase() || "";
              const visible = text.includes(searchText);
              (row as HTMLElement).style.display = visible ? "" : "none";
            });
          });
        }
      });
    </script>
  </body>
</html>
